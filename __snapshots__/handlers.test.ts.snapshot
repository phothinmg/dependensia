exports[`Handle Imports > should detect await import declarations 1`] = `
{
  "str": "await import(\\"foo\\")",
  "expected": [
    "foo"
  ],
  "result": [
    "foo"
  ]
}
`;

exports[`Handle Imports > should detect default import 1`] = `
{
  "str": "import foo from \\"foo\\";",
  "expected": [
    "foo"
  ],
  "result": [
    "foo"
  ]
}
`;

exports[`Handle Imports > should detect import equals declarations 1`] = `
{
  "str": "import foo = require(\\"foo\\");",
  "expected": [
    "foo"
  ],
  "result": [
    "foo"
  ]
}
`;

exports[`Handle Imports > should detect name import 1`] = `
{
  "str": "import {foo,bar.qux} from \\"foo\\";",
  "expected": [
    "foo"
  ],
  "result": [
    "foo"
  ]
}
`;

exports[`Handle Imports > should detect var statement with await import declarations 1`] = `
{
  "str": "const bar = await import(\\"foo\\")",
  "expected": [
    "foo"
  ],
  "result": [
    "foo"
  ]
}
`;

exports[`Handle Imports > should detect var statement with await import declarations inside function declaration 1`] = `
{
  "str": "function qux(){ const bar = await import(\\"foo\\") }",
  "expected": [
    "foo"
  ],
  "result": [
    "foo"
  ]
}
`;

exports[`Handle Require Calls > should detect require call inside function declaration 1`] = `
{
  "str": "function foo(){ var bar = require(\\"bar\\")}",
  "expected": [
    "bar"
  ],
  "result": [
    "bar"
  ]
}
`;

exports[`Handle Require Calls > should detect require call with property access 1`] = `
{
  "str": "var foo = require(\\"bar\\").baz;",
  "expected": "bar",
  "result": "bar"
}
`;

exports[`Handle Require Calls > should detect require call with string literal argument 1`] = `
{
  "str": "var foo = require(\\"bar\\");",
  "expected": "bar",
  "result": "bar"
}
`;

exports[`Handle Require Calls > should not detect non-require call 1`] = `
{
  "str": "var foo = baz;",
  "expected": [],
  "result": []
}
`;

exports[`Handle Require Calls > should not detect require call with non-string literal argument 1`] = `
{
  "str": "var foo = require(baz);",
  "expected": [],
  "result": []
}
`;

exports[`Handle Require Calls > should recursively detect require call 1`] = `
{
  "str": "var foo = require(\\"bar\\"); var baz = require(\\"qux\\");",
  "expected": [
    "bar",
    "qux"
  ],
  "result": [
    "bar",
    "qux"
  ]
}
`;

exports[`Handle mixed imports  and two edge script target > should detect ES5 1`] = `
{
  "str": "import foo from \\"barOne\\";\\nimport {foo,bar.qux} from \\"barTwo\\";\\nawait import(\\"barThree\\");\\nconst bar = await import(\\"barFour\\");\\nfunction foo(){ const bar = await import(\\"barFive\\")};\\nif(foo){ const bar = await import(\\"barSix\\")}",
  "expected": [
    "barOne",
    "barTwo",
    "barThree",
    "barFour",
    "barFive",
    "barSix"
  ],
  "result": [
    "barOne",
    "barTwo",
    "barThree",
    "barFour",
    "barFive",
    "barSix"
  ]
}
`;

exports[`Handle mixed imports  and two edge script target > should detect latest 1`] = `
{
  "str": "import foo from \\"barOne\\";\\nimport {foo,bar.qux} from \\"barTwo\\";\\nawait import(\\"barThree\\");\\nconst bar = await import(\\"barFour\\");\\nfunction foo(){ const bar = await import(\\"barFive\\")};\\nif(foo){ const bar = await import(\\"barSix\\")}",
  "expected": [
    "barOne",
    "barTwo",
    "barThree",
    "barFour",
    "barFive",
    "barSix"
  ],
  "result": [
    "barOne",
    "barTwo",
    "barThree",
    "barFour",
    "barFive",
    "barSix"
  ]
}
`;

exports[`Handle mixed require calls and two edge script target > should detect ES5 1`] = `
{
  "str": "var foo = require(\\"barOne\\");\\nvar foo = require(\\"barTwo\\").baz;\\nfunction foo(){ var bar = require(\\"barThree\\")};\\nif(foo){ var bar = require(\\"barFour\\")}",
  "expected": [
    "barOne",
    "barTwo",
    "barThree",
    "barFour"
  ],
  "result": [
    "barOne",
    "barTwo",
    "barThree",
    "barFour"
  ]
}
`;

exports[`Handle mixed require calls and two edge script target > should detect latest 1`] = `
{
  "str": "var foo = require(\\"barOne\\");\\nvar foo = require(\\"barTwo\\").baz;\\nfunction foo(){ var bar = require(\\"barThree\\")};\\nif(foo){ var bar = require(\\"barFour\\")}",
  "expected": [
    "barOne",
    "barTwo",
    "barThree",
    "barFour"
  ],
  "result": [
    "barOne",
    "barTwo",
    "barThree",
    "barFour"
  ]
}
`;
